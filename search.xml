<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>missing-semester-lecture1-shell</title>
      <link href="/2022/02/06/missing-semester-lecture1-shell/"/>
      <url>/2022/02/06/missing-semester-lecture1-shell/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>Edited by 颍川散人</th><th>Data: 2022.2.4</th></tr></thead></table><p><strong>1.Create a new directory called <code>missing</code> under <code>/tmp</code>.</strong></p><p>首先找到 <code>/tmp</code> 目录位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mac@192 ~ % pwd</span><br><span class="line">/Users/mac</span><br><span class="line">mac@192 ~ % cd ..</span><br><span class="line">mac@192 /Users % pwd</span><br><span class="line">/Users</span><br><span class="line">mac@192 /Users % ls</span><br><span class="line">GuestSharedmac</span><br><span class="line">mac@192 /Users % cd ..</span><br><span class="line">mac@192 / % pwd </span><br><span class="line">/</span><br><span class="line">mac@192 / % ls</span><br><span class="line">ApplicationsVolumesetcsbin</span><br><span class="line">Librarybinhometmp</span><br><span class="line">Systemcoresoptusr</span><br><span class="line">Usersdevprivatevar</span><br></pre></td></tr></table></figure><p>使用指令 <code>cd tmp</code> 进入 <code>/tmp</code> 目录下</p><p>使用指令 <code>mkdir missing</code>  在当前 <code>/tmp</code> 目录下创建新的 <code>missing</code> 目录</p><p><strong>2.Look up the <code>touch</code> program. The <code>man</code> program is your friend.</strong></p><p>使用 <code>man + 指令名称 </code> 可以跳转到指令对应的技术文档，以查阅相关用法</p><p>在这里我们使用 <code>man touch</code></p><p><strong>3.Use <code>touch</code> to create a new file called <code>semester</code> in <code>missing</code>.</strong></p><p>当前在 <code>/tmp</code> 目录下，需要先进入 <code>/tmp/missing</code> 目录，然后用touch指令新建semester文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd missing</span><br><span class="line">touch semester</span><br></pre></td></tr></table></figure><p>检查发现 <code>/tmp/missing</code> 下已经有了 <code>semester</code> 文件</p><p><strong>4.Write the following into that file, one line at a time:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">curl --head --silent https://missing.csail.mit.edu</span><br></pre></td></tr></table></figure><p><strong>5.The first line might be tricky to get working. It’s helpful to know that <code>#</code> starts a comment in Bash, and <code>!</code> has a special meaning even within double-quoted (<code>&quot;</code>) strings. Bash treats single-quoted strings (<code>&#39;</code>) differently: they will do the trick in this case. See the Bash <a href="https://www.gnu.org/software/bash/manual/html_node/Quoting.html">quoting</a> manual page for more information.</strong></p><p>当前仍处在 <code>/tmp/missing</code> 目录下，直接用<code>echo</code>命令和<code>&gt;</code>运算符向<code>semester</code>文件中写入内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  missing echo &#x27;#!/bin/sh&#x27; &gt;semester</span><br><span class="line">➜  missing echo &#x27;curl --head --silent https://missing.csail.mit.edu&#x27; &gt;&gt;semester</span><br></pre></td></tr></table></figure><p>其中运算符<code>&gt;</code>是重写覆盖，运算符<code>&gt;&gt;</code>是追加内容，会自动换行</p><p>使用指令<code>cat</code>来查看<code>semester</code>文件内容，发现内容已经正确写入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  missing cat semester</span><br><span class="line"><span class="meta">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">curl --head --silent https://missing.csail.mit.edu</span><br></pre></td></tr></table></figure><p>可以发现在写入第一行内容时，如果使用双引号<code>&quot;</code>而非单引号<code>&#39;</code>会报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  missing echo &quot;#!/bin/sh&quot; &gt; semester</span><br><span class="line">zsh: event not found: /bin/sh</span><br></pre></td></tr></table></figure><p>这就是提示中告诉我们的，<code>#</code>和<code>!</code>在双引号中也表示特殊含义，所以最好用单引号来书写内容</p><p><strong>6.Try to execute the file, i.e. type the path to the script (<code>./semester</code>) into your shell and press enter. Understand why it doesn’t work by consulting the output of <code>ls</code> (hint: look at the permission bits of the file).</strong></p><p>先按照题目要求把<code>./semester</code>输入到shell中，按下enter，返回错误</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  missing ./semester</span><br><span class="line">zsh: permission denied: ./semester</span><br></pre></td></tr></table></figure><p>我们根据提示关注一下文件的权限位，用<code>ls -l 文件名</code>查看文件的权限位</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  missing ls -l semester</span><br><span class="line">-rw-r--r--  1 mac  wheel  9  2  4 15:57 semester</span><br></pre></td></tr></table></figure><p>权限位有10位，第一位表示了文件类型，<code>-</code>表示普通文件，<code>d</code>表示目录</p><p>跟在后面的9位分三组，每三位一组</p><p>r表是读 (Read) 、w表示写 (Write) 、x表示执行 (Execute)</p><p>第一组表示文件拥有者的权限，第二组表示文件所属组拥有的权限，最后一组表示其他用户拥有的权限</p><p>可见，该文件无法被执行</p><p><strong>7.Run the command by explicitly starting the <code>sh</code> interpreter, and giving it the file <code>semester</code> as the first argument, i.e. <code>sh semester</code>. Why does this work, while <code>./semester</code> didn’t?</strong></p><p>直接输入命令<code>sh semester</code>按下回车运行，可见脚本文件成功执行</p><p><code>sh</code>命令是运行Linux或macOS脚本文件的，解析脚本的操作和执行文件不同，因为<code>semester</code>不是可执行文件，所以<code>./semester</code>无法运行而<code>sh</code>可以</p><p><strong>8.Look up the <code>chmod</code> program (e.g. use <code>man chmod</code>).</strong></p><p>输入命令<code>man chmod</code>查看<code>chmod</code></p><p><strong>9.Use <code>chmod</code> to make it possible to run the command <code>./semester</code> rather than having to type <code>sh semester</code>. How does your shell know that the file is supposed to be interpreted using <code>sh</code>? See this page on the <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">shebang</a> line for more information</strong></p><p>由上述操作可知因为<code>semester</code>文件缺少可执行权限而无法被直接运行，用<code>chmod</code>命令可以为其增加可执行权限</p><p>使用以下指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  missing chmod u+x semester</span><br></pre></td></tr></table></figure><p>该指令为user增加可执行权限，使用<code>ls</code>查看权限，发现确实增加了可执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  missing ls -l semester</span><br><span class="line">-rwxr--r--  1 mac  wheel  61  2  4 22:56 semester</span><br></pre></td></tr></table></figure><p>再次输入<code>./semester</code>发现脚本文件可以被顺利执行</p><p><strong>10.Use <code>|</code> and <code>&gt;</code> to write the “last modified” date output by <code>semester</code> into a file called <code>last-modified.txt</code> in your home directory.</strong></p><p><code>|</code>指令可以把<code>|</code>左边的输出作为右边的输入，比如这个指令<code>ls -l / | tail -n1</code>,就是把<code>ls -l /</code>的输出结果作为<code>tail -n1</code>的输入，最终输出主目录信息的最后一行</p><p>就这一问，首先要获取<code>./semester</code>输出内容的第四行，也就是<code>last-modified</code>的内容</p><p>想获取文件指定行的内容，可以用指令<code>tail -n+k filename | head -n1</code>,该指令先获取文件从第k行以后的内容，然后输出该内容的第一行，也就是原文件的第k行</p><p>所以可以用以下指令完成题目要求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  missing ./semester | tail -n+4 | head -n1 | &gt;last-modified.txt</span><br><span class="line">➜  missing cat last-modified.txt</span><br><span class="line">last-modified: Tue, 11 Jan 2022 16:37:26 GMT</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/02/06/hello-world/"/>
      <url>/2022/02/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
